#!/usr/bin/env node

var app = require('../app'); // Import app
var debug = require('debug')('nnkb:server'); 
var http = require('http');

// Lấy port từ biến môi trường hoặc thiết lập mặc định
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Tạo HTTP server
var server = http.createServer(app);

// Tích hợp socket.io với server
const socketIo = require('socket.io');
const io = socketIo(server, {
  cors: {
    origin: "*", // Cho phép tất cả các domain hoặc thay bằng domain frontend của bạn
    methods: ["GET", "POST"],
    credentials: true
  }
});

const message = require('../models/message/message');
const messagemedia = require('../models/message/messagemedia');
const messagelike = require('../models/message/messagelike');
const media = require('../models/media/media');
const chatmember = require('../models/chat/chatmember');
const user = require('../models/user/users');
const chat = require('../models/chat/chat');
const notifications = require('../models/notification/notification');

app.locals.io = io;

io.on('connection', (socket) => {
  console.log('Socket connected');

  socket.on('joinChat', async (chatId) => {
      socket.join(chatId);
      console.log(`User joined chat ${chatId}`);
      try {
          const findchat = await chat.findById(chatId);
          if (!findchat) {
              return; // Nếu không tìm thấy chat thì dừng lại
          }


          let messages = [];
          // Lấy danh sách các thành viên trong chat
          const chatMembers = await chatmember.find({ Chat: chatId }).select('User');

          
          // Sử dụng Promise.all để xử lý tất cả các yêu cầu lấy tin nhắn đồng thời
          const messagePromises = chatMembers.map(async member => {
              //console.log(member.User._id);
              const uniquemessage = await message.find({ chat: chatId, senderId: member.User._id })
                  .sort({ createdAt: -1 }) // Sắp xếp theo thời gian tạo tin nhắn từ cũ đến mới
                  .populate('repliedmessage')
                  .exec();
              return uniquemessage; // Trả về tin nhắn cho mỗi thành viên
          });

          // Chờ tất cả các tin nhắn được lấy về
          messages = await Promise.all(messagePromises);
          console.log(messages);

          // Gửi tin nhắn đã sắp xếp cho client
          socket.emit('oldMessages', messages.flat()); // Dùng .flat() để gộp tất cả các tin nhắn vào một mảng duy nhất

      } catch (error) {
          console.error("Error in joinChat:", error.message);
      }
  });

  socket.on('leaveChat', (chatId) => {
      socket.leave(chatId);
      console.log(`Client left room: ${chatId}`);
  });

  socket.on('newMessage', async (message) => {
    // Gửi tin nhắn mới tới tất cả các client trong nhóm chat
    const chatId = message.chatId;
    //console.log(`Client new message: ${chatId}`);
    socket.to(chatId).emit('Messages', message.data);
    
    const newnotification = await notifications.create({
      user: message.senderId , 
      type: 'message',
      content: `new message by ${message.senderId}`
    });

    await newnotification.save();

    const sender = await user.findById( message.senderId );

    socket.to(chatId).emit('notification', {
      type: 'message',
      content: `Tin nhắn mới từ ${sender.username}`,
    });
  });

  socket.on('disconnect', () => {
      console.log('User disconnected');
  });
});

// Cung cấp io cho app để có thể sử dụng ở những phần khác trong ứng dụng
app.set('socketio', io);

// Cấu hình server lắng nghe trên port
const host = '0.0.0.0';
server.listen(port, host, () => {
  console.log(`Server is running on port ${port}`);
});

// Xử lý lỗi và sự kiện lắng nghe
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
